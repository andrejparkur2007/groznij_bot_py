import config
import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentType

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)


#PRICE =types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–≤—Å–µ–≥–¥–∞", amount=5 * 100)

#1 month
#@dp.message_handler(commands=['buy'])
#async def buy(message: types.Message):
#    if config.PAYMENTS_TOKEN.split(':')[1] == 'TEST':
#        await bot.send_message(message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂")

#    await bot.send_invoice(message.chat.id,
#                            title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–≤—Å–µ–≥–¥–∞! 5 USD / 300 RUB",
#                            description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–≤—Å–µ–≥–¥–∞ –Ω–∞ –≤—Å–µ —É—Å–ª—É–≥–∏",
#                            provider_token=config.PAYMENTS_TOKEN,
#                            currency="usd",
#                            photo_url="https://i.ibb.co/smGBTbR/8321cf6c06273596ed140bbd1673b2d8.jpg",
#                            photo_width=416,
#                            photo_height=234,
#                            photo_size=416,
#                            is_flexible=False,
#                            prices=[PRICE],
#                            start_parameter="one-month_subscription",
#                            payload="test-invoice-payloader")

#@dp.pre_checkout_query_handler()
#async def pre_cheackout_query(pre_cheackout_q: types.PreCheckoutQuery):
#    await bot.answer_pre_checkout_query(pre_cheackout_q.id, ok=True)

#suc pay
#@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
#async def succesful_payment(message: types.Message):
#    print("Succesfly:")
#    payment_info = message.successful_payment.to_python()
#    for k, v in payment_info.items():
#        print(f"{k} = {v}")

#    await bot.send_message(message.chat.id,
#                        f"–ü–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ!")





#tg
@dp.message_handler(commands=['tg'])
async def tg(message: types.Message):
    await bot.send_message(message.chat.id, "–≠—Ç–æ —è -> @txtxtadh")



#desc
@dp.message_handler(commands=['desc'])
async def desc(message: types.Message):
    await bot.send_message(message.chat.id, "—á–æ")
    #await bot.send_message(message.chat.id, "–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —É—Å–ª—É–≥–∏ –æ—Ç –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞")
    #await bot.send_message(message.chat.id, "–í–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /buy")


#buy chanel
@dp.message_handler(commands=['channel'])
async def channel(message: types.Message):
    await bot.send_message(message.chat.id, "–ú–æ–π –ø–∞–±–ª–∏–∫ —Ç—É—Ç –≤—Å—ë, @timur4ik_parkur4ik")


#start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):

    #await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –æ—Ñ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –∫–∞–Ω–∞–ª–∞ @dogehacksso2\n ‚Üì –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —É–∫–∞–∑–∞–Ω –Ω–∏–∂–µ ‚Üì \n /desc - –æ–ø–∏—Å–∞–Ω–∏–µ \n /buy - –∫—É–ø–∏—Ç—å —É—Å–ª—É–≥–∏ \n /tg - —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ñ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª \n /web - –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –µ—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –≠—Ç–æ –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–Ω —Ç–∏–ø–æ–º -> @txtxtadh \n –¢—É—Ç –º–æ–∂–Ω–æ —á–æ —Ç–æ —Å–¥–µ–ª–∞—Ç—å \n –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ \n /about \n /relisum \n /channel".format(message.from_user))


#Categories
#@dp.message_handler(commands=['list'])
#async def list(message):
#   markup_test = types.InlineKeyboardMarkup()
#    btncs = types.InlineKeyboardButton("ü•∂–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ DogeCheat CSGO –Ω–∞ 30 –¥–Ω–µ–π!ü•∂", url='https://oplata.qiwi.com/form?invoiceUid=6d4ab8be-609b-4a39-aee4-4d6803f20598')
#   btnst = types.InlineKeyboardButton("üî•–ü–†–∏–æ–±—Ä–µ—Å—Ç–∏ DogeCheat Standoff 2 –Ω–∞ 30 –¥–Ω–µ–π!üî•", url='https://oplata.qiwi.com/form?invoiceUid=6d4ab8be-609b-4a39-aee4-4d6803f20598')
#    markup_test.add(btncs)
#    markup_test.add(btnst)
#    await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä –∏ –æ–ø–ª–∞—Ç–∏ –µ–≥–æ)".format(message.from_user), reply_markup=markup_test)

#relisium
@dp.message_handler(commands=['relisium'])
async def start(message: types.Message):

    #await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –æ—Ñ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –∫–∞–Ω–∞–ª–∞ @dogehacksso2\n ‚Üì –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —É–∫–∞–∑–∞–Ω –Ω–∏–∂–µ ‚Üì \n /desc - –æ–ø–∏—Å–∞–Ω–∏–µ \n /buy - –∫—É–ø–∏—Ç—å —É—Å–ª—É–≥–∏ \n /tg - —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ñ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª \n /web - –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –µ—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    await bot.send_message(message.chat.id, "—Å–∫–æ—Ä–æ".format(message.from_user))
    #await bot.send_message(message.chat.id, "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω—ã –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \n /buy")
#btn
@dp.message_handler(commands=['about']) #—Å–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
async def btn(message):
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("‚ù§My Github‚ù§", url='https://github.com/andrejparkur2007')
    button2 = types.InlineKeyboardButton("üß°My Web (new)üß°", url='https://www.groznij.tk')
    button3 = types.InlineKeyboardButton("üíôRelisium (soon)üíô", url='https://www.relisium.tk')
    button4 = types.InlineKeyboardButton("ü§çPublic (—á–æ)ü§ç", url='https://t.me/timur4ik_parkur4ik')
    button5 = types.InlineKeyboardButton("üëâDonateüëà", url='https://www.supportgroznij.tk')
    markup.add(button1)
    markup.add(button2)
    markup.add(button3)
    markup.add(button4)
    markup.add(button5)
    await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, {0.first_name}! eisfjhs".format(message.from_user), reply_markup=markup)
    #await bot.send_message(message.chat.id, "{0.first_name}! –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ @txtxtadh —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å".format(message.from_user))





if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)





